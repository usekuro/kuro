name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.21", "1.22"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o bin/usekuro-linux-amd64 ./cmd/usekuro
        GOOS=darwin GOARCH=amd64 go build -o bin/usekuro-darwin-amd64 ./cmd/usekuro
        GOOS=windows GOARCH=amd64 go build -o bin/usekuro-windows-amd64.exe ./cmd/usekuro

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: usekuro-binaries
        path: bin/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: usekuro-binaries
        path: bin/

    - name: Make binary executable
      run: chmod +x bin/usekuro-linux-amd64

    - name: Run integration tests
      run: |
        # Start mock server
        ./bin/usekuro-linux-amd64 run examples/http_api.kuro &
        SERVER_PID=$!

        # Wait for server to start
        sleep 3

        # Run integration tests
        go test -v ./tests/integration/

        # Clean up
        kill $SERVER_PID || true

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: usekuro-binaries
        path: bin/

    - name: Make binary executable
      run: chmod +x bin/usekuro-linux-amd64

    - name: Validate all example files
      run: |
        for file in examples/*.kuro; do
          echo "Validating $file..."
          ./bin/usekuro-linux-amd64 validate "$file"
        done

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: usekuro/kuro
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: usekuro-binaries
        path: bin/

    - name: Make binary executable
      run: chmod +x bin/usekuro-linux-amd64

    - name: Run benchmark tests
      run: |
        go test -bench=. -benchmem ./internal/runtime/ > bench.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: bench.txt

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, integration-test, validate-examples]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: usekuro-binaries
        path: bin/

    - name: Create release archives
      run: |
        cd bin
        tar -czf usekuro-linux-amd64.tar.gz usekuro-linux-amd64
        tar -czf usekuro-darwin-amd64.tar.gz usekuro-darwin-amd64
        zip usekuro-windows-amd64.zip usekuro-windows-amd64.exe

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git history
        echo "## What's Changed" > CHANGELOG.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bin/usekuro-linux-amd64.tar.gz
          bin/usekuro-darwin-amd64.tar.gz
          bin/usekuro-windows-amd64.zip
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
